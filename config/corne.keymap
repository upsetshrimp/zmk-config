/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        new_combo {
            bindings = <&mo 6>;
            key-positions = <11 23 35>;
        };
    };

    behaviors {
        lh_pht: lh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            global-quick-tap;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <19 20 21 22>;
        };
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            global-quick-tap;
        };
        rh_pht: rh_pht {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <200>;
            flavor = "tap-unless-interrupted";
            hold-trigger-key-positions = <16 13 14 15>;
            global-quick-tap;
        };
        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            bindings =
                <&none>,
                <&none>;

            #binding-cells = <2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
     &kp F15  &kp Q           &kp W               &kp E      &kp R             &kp T        &kp Y            &kp U               &kp I           &kp O          &kp P       &kp F18
&kp LEFT_GUI  &kp A  &hm LEFT_ALT S  &hm LEFT_CONTROL D      &kp F             &kp G        &kp H            &kp J  &hm LEFT_CONTROL K  &hm LEFT_ALT L  &kp SEMICOLON  &kp LEFT_GUI
     &kp F13  &kp Z           &kp X               &kp C      &kp V             &kp B        &kp N            &kp M           &kp COMMA         &kp DOT       &kp FSLH       &kp F16
                                             &kp DELETE  &lt 1 TAB  &hm LSHIFT SPACE    &lt 3 RET  &lt 2 BACKSPACE        &lt 4 ESCAPE
            >;
        };

        NAV {
            bindings = <
&trans        &trans        &trans     &trans     &trans  &kp LS(LG(S))    &kp K_UNDO  &kp K_PASTE  &kp K_COPY  &kp K_REDO      &trans  &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LSHFT         &trans      &kp LEFT     &kp DOWN      &kp UP   &kp RIGHT  &caps_word  &trans
&trans        &trans        &trans     &trans     &trans         &trans      &kp HOME    &kp PG_DN   &kp PG_UP     &kp END      &trans  &trans
                                       &trans     &trans         &trans        &trans       &trans      &trans
            >;
        };

        NUM {
            bindings = <
&trans   &kp LBKT  &kp N7      &kp N8        &kp N9  &kp RIGHT_BRACKET    &trans     &trans     &trans    &trans        &trans  &trans
&trans   &kp SEMI  &kp N4      &kp N5        &kp N6          &kp EQUAL    &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI  &trans
&trans  &kp GRAVE  &kp N1      &kp N2        &kp N3           &kp BSLH    &trans     &trans     &trans    &trans        &trans  &trans
                           &kp PERIOD  &kp NUMBER_0          &kp MINUS    &trans     &trans     &trans
            >;
        };

        SYM {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND          &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE           &trans            &trans     &trans    &trans        &trans  &trans
&trans       &kp COLON     &kp DOLLAR           &kp PERCENT              &kp CARET         &kp PLUS           &trans         &kp LSHFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI  &trans
&trans       &kp TILDE       &kp EXCL                &kp AT               &kp HASH         &kp PIPE    &kp LESS_THAN  &kp GREATER_THAN     &trans    &trans        &trans  &trans
                                       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp UNDERSCORE           &trans            &trans     &trans
            >;
        };

        FUNC {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp LS(LG(S))    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6         &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3         &trans    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans         &trans    &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        system_layer {
            bindings = <
    &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans   &kp B  &trans  &trans  &trans  &trans
    &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                              &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };
};
